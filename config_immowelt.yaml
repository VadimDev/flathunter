# Enable verbose mode (print DEBUG log messages)
verbose: true

# Should the bot endlessly looop through the URLs?
# Between each loop it waits for <sleeping_time> seconds.
# Note that Ebay will (temporarily) block your IP if you
# poll too often - don't lower this below 600 seconds if you
# are crawling Ebay.
loop:
  active: no
  sleeping_time: 300 #600

# Location of the Database to store already seen offerings
# Defaults to the current directory
#database_location: /path/to/database

# List the URLs containing your filter properties below.
# Currently supported services: www.immobilienscout24.de,
# www.immowelt.de, www.wg-gesucht.de, www.kleinanzeigen.de, meinestadt.de and vrm-immo.de.
# List the URLs in the following format:
# urls:
# 	- https://www.immobilienscout24.de/Suche/...
# 	- https://www.wg-gesucht.de/...
urls:
# all Nordrhein-Westfalen
# - https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=AD04DE5&order=DateDesc

# Düsseldorf +25km
  - https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=eyJwbGFjZUlkIjoiQUQwOERFMjExMiIsInJhZGl1cyI6MjUsInBvbHlsaW5lIjoib2JieUhhYGpoQGBabHZMZm9BaGVMaGFDeGNLZG5EYnNJanRFanVHZHJGfGxFdGZHeHxCfHBHfmdAdnBHZWxAfGVHaWBDYHFGa29FYHNFZXZHfGxEaXJJYmBDa2FLbm5BeWFMellnckx7WWlyTG9uQXlhTGNgQ2thS31sRGlySWFzRWV2R2FxRmtvRX1lR2lgQ3dwR2VsQH1wR35nQHVmR3h8QmVyRnxsRWt0RWp1R2VuRGJzSWlhQ3hjS2dvQWhlTGFabnZMIn0&order=DateDesc
# Köln +25km
  - https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=eyJwbGFjZUlkIjoiQUQwOERFMjE3OSIsInJhZGl1cyI6MjUsInBvbHlsaW5lIjoifXBld0h3Y3ZpQGBabnNMZm9BbmJMaGFDZGFLZG5EeHBJaHRFcHNHZnJGcGtFdGZHfntCfHBHdmdAdHBHe2tAfGVHbV9DYnFGfW1FYHNFa3RHemxEX3BJZGBDe35Kbm5BX19Mellrb0x7WWtvTG9uQWFfTGVgQ3l-SntsRGFwSWFzRWl0R2NxRn1tRX1lR21fQ3VwR3trQH1wR3ZnQHVmR3x7QmdyRnJrRWl0RW5zR2VuRHpwSWlhQ2RhS2dvQW5iTGFabnNMIn0&order=DateDesc
# Bochum +25km
  - https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=eyJwbGFjZUlkIjoiQUQwOERFMjQyNSIsInJhZGl1cyI6MjUsInBvbHlsaW5lIjoid3JuekhjX2NrQGJadHhMZm9BbGdMZmFDdGVLZm5EenRJaHRFdnZHZnJGfm1FdGZHan1CfHBHZGhAdHBHbWxAfGVHX2FDYnFGa3BFYHNFc3dHemxEfXNJYmBDa2NLbm5BeWNMelltdEx7WW10TG9uQXtjTGNgQ2ljS3tsRF90SWFzRXN3R2NxRmtwRX1lR19hQ3VwR2tsQH1wR2JoQHVmR2x9QmdyRn5tRWl0RXZ2R2duRHh0SWdhQ3ZlS2dvQWxnTGNadHhMIn0&order=DateDesc
# Bonn +25km
  - https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=eyJwbGFjZUlkIjoiQUQwOERFMjE3OCIsInJhZGl1cyI6MjUsInBvbHlsaW5lIjoia2p7dUh9emxqQGJabnFMZm9BcGBMZmFDal9LZG5EZm9JanRFZnJHZHJGdGpFdGZHbHtCfHBHcGdAdHBHc2tAfGVHe35CYnFGX21FYHNFYXNHfGxEbW5JYmBDYX1KcG5BY31LeFltbUx5WWttTHFuQWN9S2NgQ2F9Sn1sRG9uSWFzRWFzR2NxRn1sRX1lR3t-QnVwR3NrQH1wR3BnQHVmR2p7QmVyRnRqRWt0RWZyR2VuRGhvSWdhQ2pfS2dvQXBgTGNabHFMIn0&order=DateDesc
# Duisburg +25km
  - https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=eyJwbGFjZUlkIjoiQUQwOERFMjExMyIsInJhZGl1cyI6MjUsInBvbHlsaW5lIjoiY19mekhfYWRoQGBaZnhMZm9BYGdMaGFDamVLZG5EbnRJanRFbHZHZHJGeG1FdGZHaH1CfnBHYmhAdHBHa2xAfGVHe2BDYHFGZXBFYHNFaXdHemxEdXNJZGBDfWJLbm5BbWNMeFlhdEx5WV90TG9uQW1jTGVgQ31iS3tsRHVzSWFzRWl3R2FxRmVwRX1lR3tgQ3VwR2tsQF9xR2JoQHVmR2h9QmVyRnZtRWt0RW52R2VuRG50SWlhQ2plS2dvQX5mTGFaZnhMIn0&order=DateDesc
# Wuppertal +25km
  - https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=eyJwbGFjZUlkIjoiQUQwOERFMjEyMSIsInJhZGl1cyI6MjUsInBvbHlsaW5lIjoie2hleUhrZnFqQGJacnZMZm9BbGVMZmFDfGNLZG5EZnNJanRFbnVHZnJGfmxFdGZHenxCfHBHfmdAdHBHZWxAfGVHa2BDYnFGbW9FfnJFaXZHfGxEbXJJYmBDb2FLbm5BfWFMelltckx7WW1yTG9uQX1hTGNgQ3FhS31sRG1ySV9zRWl2R2NxRmtvRX1lR2tgQ3VwR2VsQH1wR3xnQHVmR3p8QmdyRmBtRWt0RWx1R2VuRGZzSWdhQ3xjS2dvQW5lTGNacnZMIn0&order=DateDesc

# kleinanzeigen (eBay)
#  - https://www.kleinanzeigen.de/s-wohnung-mieten/koeln/c203l945
#  - https://www.kleinanzeigen.de/s-wohnung-mieten/duesseldorf/c203l2068

# immobilienscout24 < 1000 eur
#  - https://www.immobilienscout24.de/Suche/radius/wohnung-mieten?centerofsearchaddress=D%C3%BCsseldorf;;;;;;&price=-1000.0&pricetype=rentpermonth&geocoordinates=51.22496;6.77567;30.0&sorting=2

# Define filters to exclude flats that don't meet your critera.
# Supported filters include 'max_rooms', 'min_rooms', 'max_size', 'min_size',
#   'max_price', 'min_price', and 'excluded_titles'.
#
# 'excluded_titles' takes a list of regex patterns that match against
# the title of the flat. Any matching titles will be excluded.
# More to Python regex here: https://docs.python.org/3/library/re.html
#
# Example:
# filters:
#   excluded_titles:
#     - "wg"
#     - "zwischenmiete"
#   min_price: 700
#   max_price: 1000
#   min_size: 50
#   max_size: 80
#   max_price_per_square: 1000
filters:

# There are often city districts in the address which
# Google Maps does not like. Use this blacklist to remove
# districts from the search.
#
# blacklist:
#   - Innenstadt

# If an expose includes an address, the bot is capable of
# displaying the distance and time to travel (duration) to
# some configured other addresses, for specific kinds of
# travel.
#
# Available kinds of travel ('gm_id') can be found in the
# Google Maps API documentation, but basically there are:
#	- "bicycling"
#	- "transit" (public transport)
#	- "driving"
# - "walking"
#
# The example configuration below includes a place for
# "John", located at the main train station of munich.
# Two kinds of travel (bicycle and transit) are requested,
# each with a different label. Furthermore a place for
# "Jane" is included, located at the given destination and
# with the same kinds of travel.
# durations:
#   - name: John
#     destination: Hauptbahnhof, München
#     modes:
#       - gm_id: transit
#         title: "Öff."
#       - gm_id: bicycling
#         title: "Rad"
#   - name: Jane
#     destination: Karlsplatz, München
#     modes:
#       - gm_id: transit
#         title: "Öff."
#       - gm_id: driving
#         title: "Auto"

# Multiline string (yes, the | is supposed to be there),
# to format the message received from Telegram or Apprise.
#
# Available placeholders:
#   - {crawler}: The name of the crawler
# 	- {title}: The title of the expose
#	- {rooms}: Number of rooms
#	- {price}: Price for the flat
# 	- {durations}: Durations calculated by GMaps, see above
#	- {url}: URL to the expose
message: |
  {title}
  Zimmer: {rooms}
  Größe: {size}
  Preis: {price}
  Ort: {address}

  {url}

# (Multiline) string to format the title for the message received from Apprise.
#
# For available placeholders see above
title: '{crawler}: {title}'

# Calculating durations requires access to the Google Maps API.
# Below you can configure the URL to access the API, with placeholders.
# The URL should most probably just kept like that.
# To use the Google Maps API, an API key is required. You can obtain one
# without costs from the Google App Console (just google for it).
# Additionally, to enable the API calls in the code, set the 'enable' key to True
#
# google_maps_api:
#   key: YOUR_API_KEY
#   url: https://maps.googleapis.com/maps/api/distancematrix/json?origins={origin}&destinations={dest}&mode={mode}&sensor=true&key={key}&arrival_time={arrival}
#   enable: False

# If you are planning to scrape immoscout24.de, the bot will need
# to circumvent the sites captcha protection by using a captcha
# solving service. Register at either imagetypers or 2captcha
# (the former is prefered), desposit some funds, uncomment the
# corresponding lines below and replace your API key/token.
# Use driver_arguments to provide options for Chrome WebDriver.
# captcha:
#       imagetyperz:
#             token: alskdjaskldjfklj
#       2captcha:
#             api_key: alskdjaskldjfklj
#       driver_arguments:
#         - "--headless"
captcha:

# You can select whether to be notified by telegram, apprise or by mattermost
# or Slack webhooks. For all notifiers selected here a configuration must be
# provided below.
# notifiers:
#   - telegram
#   - apprise
#   - mattermost
#   - slack
notifiers:
- telegram

# Sending messages using Telegram requires a Telegram Bot configured.
# Telegram.org offers a good documentation about how to create a bot.
# Once you read it, will make sense. Still: bot_token should hold the
# access token of your bot and receiver_ids should list the client ids
# of receivers. Note that those receivers are required to already have
# started a conversation with your bot.
#
# telegram:
#   bot_token: 160165XXXXXXX....
#   notify_with_images: true
#   receiver_ids:
#       - 12345....
#       - 67890....
telegram:
  bot_token: 6465261228:AAHtJJxR9VcCfmKvFW33_pq7P-iV9M3waqE
  receiver_ids:
  - '6835868494'

# Sending messages via mattermost requires a webhook url provided by a
# mattermost server. You can find a description how to set up a webhook with
# the official mattermost documentation:
# https://docs.mattermost.com/developer/webhooks-incoming.html
# mattermost:
#   webhook_url: https://mattermost.example.com/signup_user_complete/?id=abcdef12356
mattermost:

# Sending messages using Apprise requires an Apprise url.
# Apprise allows to send notifications to a wide variety of services.
# You can find a description how to set up an Apprise url with the official
# documentation: https://github.com/caronc/apprise
# Signal notifications are documented here https://github.com/caronc/apprise/wiki/Notify_signal
# When using the apprise-api (https://github.com/caronc/apprise-api) service,
# set the limit to 6 images or increase the attachment limit in your apprise-api instance.
#
# apprise:
#   - gotifys://...
#   - mailto://..
#   - signal://localhost:9922/{FromPhoneNo}
# apprise_notify_with_images: true
# apprise_image_limit: 6
apprise:

# Sending messages to a Slack channel requires a webhook url. You can find
# a guide on how to set up a Slack webhook in the official documentation:
# https://api.slack.com/messaging/webhooks
#
# slack:
#   webhook_url: https://hooks.slack.com/services/T00000000/B00000000/XXXXXX...
slack:

# If you are running the web interface, you can configure Login with Telegram support
# Follow the instructions here to register your domain with the Telegram bot:
# https://core.telegram.org/widgets/login
#
# website:
#    bot_name: bot_name_xxx
#    domain: flathunter.example.com
#    session_key: SomeSecretValue
#    listen:
#      host: 127.0.0.1
#      port: 8080

# If you are deploying to google cloud,
# uncomment this and set it to your project id. More info in the readme.
# google_cloud_project_id: my-flathunters-project-id

# For websites like idealista.it, there are anti-crawler measures that can be
# circumvented using proxies.
# use_proxy_list: True

# If you are having bot detection issues with immobilienscout24,
# you can set the cookie that you get from your logged in account
# Go to the immobilienscout24.de website, log in, and then in the developer tools
# (F12) go to the "Network" tab, then "Cookies" and copy the value of the
# "reese84" cookie.
immoscout_cookie: ''
